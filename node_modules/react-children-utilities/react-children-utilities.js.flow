/**
 * Flowtype definitions for react-children-utilities
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.19.0
 */

// see https://gist.github.com/thecotne/6e5969f4aaf8f253985ed36b30ac9fe0
type $FlowGen$If<X: boolean, Then, Else = empty> = $Call<
  ((true, Then, Else) => Then) & ((false, Then, Else) => Else),
  X,
  Then,
  Else
>;

type $FlowGen$Assignable<A, B> = $Call<
  ((...r: [B]) => true) & ((...r: [A]) => false),
  A
>;

import * as $Flowgen$Import$react from "react";
import deepFilter from "./lib/deepFilter.js";
import deepFind from "./lib/deepFind.js";
import deepForEach from "./lib/deepForEach.js";
import deepMap from "./lib/deepMap.js";
import filter from "./lib/filter.js";
import getElementName from "./lib/getElementName.js";
import groupByType from "./lib/groupByType.js";
import hasChildren from "./lib/hasChildren.js";
import hasComplexChildren from "./lib/hasComplexChildren.js";
import onlyText from "./lib/onlyText.js";
import onlyValid from "./lib/onlyValid.js";
declare export {
  deepFilter,
  deepFind,
  deepForEach,
  deepMap,
  filter,
  getElementName,
  groupByType,
  hasChildren,
  hasComplexChildren,
  onlyText,
  onlyValid,
};
declare var _default: {
  deepFilter: (
    children: $Flowgen$Import$react.Node | $Flowgen$Import$react.Node[],
    deepFilterFn: (
      child: $Flowgen$Import$react.Node,
      index?: number | void,
      children?: $Flowgen$Import$react.Node[] | void
    ) => boolean
  ) => $Flowgen$Import$react.Node[],
  deepFind: (
    children: $Flowgen$Import$react.Node | $Flowgen$Import$react.Node[],
    deepFindFn: (
      child: $Flowgen$Import$react.Node,
      index?: number | void,
      children?: $Flowgen$Import$react.Node[] | void
    ) => boolean
  ) => $Flowgen$Import$react.Node,
  deepForEach: (
    children: $Flowgen$Import$react.Node | $Flowgen$Import$react.Node[],
    deepForEachFn: (
      child: $Flowgen$Import$react.Node,
      index?: number | void
    ) => void
  ) => void,
  deepMap: (
    children: $Flowgen$Import$react.Node | $Flowgen$Import$react.Node[],
    deepMapFn: (
      child: $Flowgen$Import$react.Node,
      index?: number | void,
      children?: $Flowgen$Import$react.Node[] | void
    ) => $Flowgen$Import$react.Node
  ) => $Flowgen$Import$react.Node[],
  filter: (
    children: $Flowgen$Import$react.Node | $Flowgen$Import$react.Node[],
    filterFn: (
      child: $Flowgen$Import$react.Node,
      index?: number | void,
      children?: $Flowgen$Import$react.Node[] | void
    ) => boolean
  ) => $Flowgen$Import$react.Node[],
  getElementName: (element: $Flowgen$Import$react.Node) => string | null,
  groupByType: (
    children: $Flowgen$Import$react.Node | $Flowgen$Import$react.Node[],
    types?: $ReadOnlyArray<
      | string
      | $Flowgen$Import$react.ComponentClass<any, any>
      | $Flowgen$Import$react.FunctionComponent<{ ... }>
    >,
    rest?: string
  ) => { [key: string]: $Flowgen$Import$react.Node[], ... },
  hasChildren: (element: $Flowgen$Import$react.Node) => boolean,
  hasComplexChildren: (element: $Flowgen$Import$react.Node) => boolean,
  onlyText: (
    children: $Flowgen$Import$react.Node | $Flowgen$Import$react.Node[]
  ) => string,
  onlyValid: (
    children: $Flowgen$Import$react.Node | $Flowgen$Import$react.Node[]
  ) => $Flowgen$Import$react.Node[],
  map<T, C>(
    children: C | $ReadOnlyArray<C>,
    fn: (child: C, index: number) => T
  ): $FlowGen$If<
    $FlowGen$Assignable<C, null | void>,
    C,
    Exclude<T, boolean | null | void>[]
  >,
  forEach<C_1>(
    children: C_1 | $ReadOnlyArray<C_1>,
    fn: (child: C_1, index: number) => void
  ): void,
  count(children: any): number,
  only<C_2>(
    children: C_2
  ): $FlowGen$If<$FlowGen$Assignable<C_2, any[]>, empty, C_2>,
  toArray(
    children: $Flowgen$Import$react.Node | $Flowgen$Import$react.Node[]
  ): (
    | string
    | number
    | $Flowgen$Import$react.Element<
        any,
        string | $Flowgen$Import$react.JSXElementConstructor<any>
      >
    | $Flowgen$Import$react.ReactFragment
    | $Flowgen$Import$react.ReactPortal
  )[],
  ...
};
declare export default typeof _default;
